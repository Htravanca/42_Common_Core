ok valgrind --leak-check=full --show-leak-kinds=all ./a.out file1.txt \"cat\" \"grep foo\" \"wc -l\" file2.txt
ok mudar o return values do Exit para os codes corretos

ok ./pipex_bonus file1 "head -n 5" "grep test" "cut -d ' ' -f 1" file2
ok o split ja conta bem as palavras agora falta por o escrever bem

No pipex por a protecao caso o waitpid nao resulte

ok 
valgrind --trace-children=yes --leak-check=full --show-leak-kinds=all --track-fds=yes ./pipex file1.txt "pwd" "wc -l" "    " file2.txt
valgrind --trace-children=yes --leak-check=full --show-leak-kinds=all --track-fds=yes ./pipex infile "pwd" "wc -l" file2.txt

echo $? - check the exit codes.

PATH=' ' ./pipex infile "ls" "wc -l" outfile




-------------Parte mandatoria-----------------------------------
TESTE 1
./pipex /dev/stdin cat ls /dev/stdout
ls

valgrind --track-fds=all --trace-children=yes

"grep foo"
wc -l
-------------Parte bonus-----------------------------------
TESTE 1
./pipex file1.txt "cat" "grep foo" "wc -l" file2.txt
< file1.txt cat | grep foo | wc -l > file2.txt

TESTE 2
./pipex file1.txt "cat" "invalid_command" "wc -l" file2.txt

TESTE 3
./pipex file1.txt "cat" "grep something" "exit 1" file2.txt

TESTE 4
./pipex file1.txt "head -n 5" "grep test" "cut -d ' ' -f 1" file2.txt

TESTE 5
./pipex emptyfile "cat" "wc -l" "echo Done" file2.txt

TESTE 6 
./pipex file1.txt "tr a-z A-Z" "sort" "uniq" file2.txt

TESTE 7
./pipex file1.txt "cat" "grep hello" "sed 's/hello/world/'" "sort" "wc -l" file2.txt

TESTE 8
./pipex file1.txt "echo 'This is a test'" "tr -d 'aeiou'" "rev" file2.txt


  Test 4. Du, Sort, Head, and WC
        ORIGINAL - < infile du -sh * | sort -hr | head -5 | wc -l > outfile
        PIPEX - ./pipex infile "du -sh *" "sort -hr" "head -5" "wc -l" outfile


Test 6. Out of scope arguments
        ORIGINAL - < Makefile grep $ | 'awk '{ if (length($0) > max) max = length($0) } END { print max }'
        PIPEX - ./pipex Makefile "grep $" "'awk '{ if (length($0) > max) max = length($0) } END { print max }'" outfile.txt

        Explanation: This test provides complex and nested commands to ensure the program can handle more advanced and potentially out-of-scope commands.